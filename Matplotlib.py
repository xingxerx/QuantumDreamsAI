import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import sys # Import sys for exit
import numpy as np # Import numpy for NaN handling

# Load the quantum results from the CSV file generated by multiverse_quantum_analysis.py
csv_file = 'multiverse_quantum_results.csv'
try:
    quantum_df = pd.read_csv(csv_file)
except FileNotFoundError:
    print(f"Error: {csv_file} not found.")
    print("Please ensure 'multiverse_quantum_analysis.py' ran successfully and generated the file.")
    sys.exit(1) # Use sys.exit for cleaner exit
except Exception as e:
    print(f"Error reading {csv_file}: {e}")
    sys.exit(1)

# --- Debugging: Check Columns ---
print(f"Columns found in {csv_file}:")
print(quantum_df.columns)
print("-" * 30)
print("First 5 rows of the loaded data:")
print(quantum_df.head())
print("-" * 30)

# --- Check for required columns ---
required_columns = ['Universe', 'Reality', 'Quantum_State']
missing_columns = [col for col in required_columns if col not in quantum_df.columns]

if missing_columns:
    print(f"Error: The CSV file '{csv_file}' is missing the following required columns: {missing_columns}")
    print("Please check the output of 'multiverse_quantum_analysis.py' to ensure it's generating the CSV correctly with columns 'Universe', 'Reality', and 'Quantum_State'.")
    sys.exit(1)
# ------------------------------------

# --- Data Transformation ---
# Ensure Quantum_State is string before mapping, handle potential non-string values
quantum_df['Quantum_State'] = quantum_df['Quantum_State'].astype(str)
# Map quantum states to numerical values for plotting. Handle unexpected values.
state_map = {'0': 0, '1': 1}
# Use .get() with a default value (e.g., NaN or -1) for states not in the map
quantum_df['Quantum_State_Num'] = quantum_df['Quantum_State'].apply(lambda x: state_map.get(x, np.nan))

# Check if mapping resulted in NaN values (unexpected states)
if quantum_df['Quantum_State_Num'].isnull().any():
    print("Warning: Some 'Quantum_State' values were not '0' or '1' and could not be mapped to numbers.")
    print("Problematic rows (first 5):")
    print(quantum_df[quantum_df['Quantum_State_Num'].isnull()].head())
# ---------------------------


# Matplotlib 3D scatter plot
try:
    fig = plt.figure(figsize=(10, 8)) # Slightly larger figure
    ax = fig.add_subplot(111, projection='3d')
    # Use the mapped numerical column
    scatter = ax.scatter(quantum_df['Universe'], quantum_df['Reality'], quantum_df['Quantum_State_Num'], c=quantum_df['Quantum_State_Num'], cmap='viridis')
    ax.set_xlabel('Universe ID')
    ax.set_ylabel('Reality ID')
    ax.set_zlabel('Quantum State (0 or 1)')
    ax.set_title('Quantum States across Universes and Realities (Matplotlib)')
    # Add a color bar
    legend1 = ax.legend(*scatter.legend_elements(), title="Quantum State")
    ax.add_artist(legend1)
    plt.tight_layout() # Adjust layout
    plt.show()
except KeyError as e:
    print(f"Plotting Error (Matplotlib): Could not find column {e}.")
    print("This should not happen if the column check above passed. Please review the column names printed earlier.")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred during Matplotlib plotting: {e}")
    sys.exit(1)


# Plotly interactive 3D scatter plot
try:
    fig_plotly = px.scatter_3d(quantum_df,
                               x='Universe',
                               y='Reality',
                               z='Quantum_State_Num', # Use numerical state for z-axis
                               color='Quantum_State', # Color by original string state for legend clarity
                               title='Quantum States across Universes and Realities (Plotly)',
                               labels={'Universe': 'Universe ID', 'Reality': 'Reality ID', 'Quantum_State_Num': 'Quantum State (0/1)'})
    fig_plotly.update_layout(margin=dict(l=0, r=0, b=0, t=40)) # Adjust margins
    fig_plotly.show()
except KeyError as e:
    print(f"Plotting Error (Plotly): Could not find column {e}.")
    print("This should not happen if the column check above passed. Please review the column names printed earlier.")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred during Plotly plotting: {e}")
    sys.exit(1)
